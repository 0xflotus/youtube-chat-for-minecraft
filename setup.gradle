/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
defaultTasks 'installMdk'

def mdkVersion = '1.11.2-13.20.0.2259';

def mdkFile = 'forge-' + mdkVersion + '-mdk.zip';
def mdkUrl = 'http://files.minecraftforge.net/maven/net/minecraftforge/forge/' \
                + mdkVersion \
                + '/' \
                + mdkFile;

task installMdk(dependsOn: 'updateMdk') {
    doLast {
        def stage = new File('stage')
        copy {
            from(stage)
            into '.'
            exclude 'src'
        }
        delete stage
    }
}

task updateMdk(dependsOn: 'stageMdk') {
    doLast {
        File dependencyFile = new File('dependencies.txt');
        String dependencyText = dependencyFile.getText('UTF-8');
        dependencyText = dependencyText.replace("{", "\\{");
        dependencyText = dependencyText.replace("}", "\\}");
        dependencyText = dependencyText.replace('$', "\\\$");
        File buildGradle = new File('stage/build.gradle');
        String text = buildGradle.getText('UTF-8')
        text = text.replaceAll('com.yourname.modid', 'com.google.youtube.ytchat')
        text = text.replaceAll('modid', 'ytchat')
        text = text.replaceAll('1.0', '1.0.0')
        text = text.replace('repositories {', 'repositories {\n        mavenCentral()');
        text = text.replaceFirst(/\ndependencies\s?\{[^\}]+\}/, dependencyText);
        buildGradle.write(text, 'UTF-8')
    }
}

task stageMdk(type: Copy) {
    def mdk = new File(mdkFile)
    if (!mdk.exists()) {
        new URL(mdkUrl).withInputStream{ i -> mdk.withOutputStream{ it << i }}
    }
    from zipTree(mdk)
    into 'stage'
}
